1.prepareRefresh() 刷新前的预处理
    1.initPropertySources()初始化一些属性设置;子类自定义个性化的属性设置方法
    2.getEnvironment().validateRequiredProperties();检验属性的合法性等
    3.[Set<ApplicationEvent>] -> this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中一些早期的事件
2.ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();告诉子类去刷新内部beanFactory，获取beanFactory
    1.refreshBeanFactory();刷新beanFactory
        创建一个this.beanFactory = new DefaultListableBeanFactory();
        设置序列化id this.beanFactory.setSerializationId(getId());
    2.ConfigurableListableBeanFactory beanFactory = getBeanFactory(); 创建beanFactory，返回 GenericApplicationContext 创建的 this.beanFactory;
    3.返回 beanFactory 【DefaultListableBeanFactory】
3.prepareBeanFactory(beanFactory);BeanFactory的预准备工作（BeanFactory进行一些设置）
    1.设置BeanFactory的类加载器、表达式解析器等
    2.添加部分BeanPostProcessor【ApplicationContextAwareProcessor】
    3.设置忽略的自动装配的接口：EnvironmentAware、EmbeddedValueResolverAware、ResourceLoaderAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware
    4.注册可以解析的自动装配：能直接在任何组件中使用 @Autowired 注解自动注入的依赖，BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
    5.添加部分后置处理器：ApplicationListenerDetector
    6.添加编译时的AspectJ支持
    7.在BeanFactory中注册一些能用的组件：environment【ConfigurableEnvironment】、systemProperties【ConfigurableEnvironment下的getSystemProperties()】、systemEnvironment【ConfigurableEnvironment下的getSystemEnvironment()】
4.postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行的后置处理工作
    1.子类通过重写这个方法在BeanFactory创建并预准备完成以后做进一步的设置
=======================================================以上是BeanFactory的创建以及预准备工作=======================================================
5.invokeBeanFactoryPostProcessors(beanFactory);执行 BeanFactoryPostProcessors
    BeanFactoryPostProcessor:BeanFactory的后置处理器，在BeanFactory标准初始化（前边的4步）之后执行的
    两个接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
    1.执行 PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors()); 执行BeanFactoryPostProcessors的方法：
        先执行 BeanDefinitionRegistryPostProcessor的方法 -> if (beanFactory instanceof BeanDefinitionRegistry)
        1.获取所有的 BeanDefinitionRegistryPostProcessor
        2.按照实现排序接口优先级排序的BeanDefinitionRegistryPostProcessors：PriorityOrdered->Ordered->剩余的 BeanDefinitionRegistryPostProcessors,调用 invokeBeanDefinitionRegistryPostProcessors -> postProcessor.postProcessBeanDefinitionRegistry(registry);
        再执行 BeanFactoryPostProcessor 的方法
        按照实现排序接口优先级排序的 BeanFactoryPostProcessor：PriorityOrdered->Ordered->剩余的 BeanFactoryPostProcessor,调用 invokeBeanFactoryPostProcessors -> postProcessor.postProcessBeanFactory(beanFactory);
6.registerBeanPostProcessors(beanFactory);注册 BeanPostProcessor （Bean的后置处理器）【拦截Bean的创建过程】
    使用委托模式 PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this); 注册 BeanPostProcessor
    后置处理器默认都可以通过PriorityOrdered、Ordered这两个接口指定优先级
    不同接口的 BeanPostProcessor 在Bean创建前后的执行时机是不一样的
    BeanPostProcessor、
    DestructionAwareBeanPostProcessor、
    InstantiationAwareBeanPostProcessor、
    SmartInstantiationAwareBeanPostProcessor、
    MergedBeanDefinitionPostProcessor【internalPostProcessors】
    1.获取所有的 BeanPostProcessor -> String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);
    2.按照实现排序接口优先级排序的 BeanPostProcessor：PriorityOrdered->Ordered->剩余的 BeanPostProcessor -> 最后注册 MergedBeanDefinitionPostProcessor【internalPostProcessors】,调用 registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors); -> beanFactory.addBeanPostProcessor(postProcessor);
    3.注册 beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext)); 在bean创建完成后检查是否是 ApplicationListener
        如果是，this.applicationContext.addApplicationListener((ApplicationListener<?>) bean); 添加ApplicationListener的bean到容器中
7.initMessageSource();初始化MessageSource组件（做国际化功能，消息绑定，消息解析）
    1.获取BeanFactory
    2.看容器中有id为messageSource且类型是MessageSource的组件的组件
        如果有，赋值给messageSource属性 this.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);
        如果没有，创建一个MessageSource组件 DelegatingMessageSource dms = new DelegatingMessageSource();
        messageSource，取出国际化配置文件中的某个key的值，能按照区域信息获取
    3.把创建好的 messageSource 注册到容器中 beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource); 以后获取国际化配置文件中的值得时候可以自动注入 messageSource ，调用它的 getMessage()方法
8.initApplicationEventMulticaster();初始化事件派发器
    1.获取
    2.从 BeanFactory 中获取 applicationEventMulticaster 的 ApplicationEventMulticaster 组件
    3.如果上一步没有配置，创建一个派发器 this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);
    4.将创建的 ApplicationEventMulticaster 添加到 BeanFactory 中，其他组件要使用派发器直接自动注入即可
9.onRefresh();留给子容器（子类）
    1.子类重写这个方法，在容器刷新点的时候可以自定义逻辑
10.registerListeners();将所有监听器 ApplicationListener 注册到容器中
    1.从容器中拿到所有的 ApplicationListener 组件 -> String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);
    2.将每个监听器添加到事件派发器中 -> getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3.派发之前步骤产生的事件
11.finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例bean
    1.beanFactory.preInstantiateSingletons();初始化剩下的单实例bean
        1.获取容器中的所有bean -> List<String> beanNames = new ArrayList<String>(this.beanDefinitionNames);依次进行初始化和创建对象
        2.获取到bean的定义信息 -> RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
        3.Bean不是抽象的，是单实例的，并且不是懒加载的 -> if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit())
            1.判断是 FactoryBean -> if (isFactoryBean(beanName)) 是否是实现FactoryBean接口的Bean,利用工厂方法创建bean
            2.如果不是FactoryBean ,调用 getBean(beanName); 来创建bean
                1.调用 doGetBean(name, null, null, false); 方法来
                2.先获取缓存中保存的单实例bean，如果能获取到，说明这个bean已经被创建过了（所有被创建过的单实例bean都会被缓存起来）
                    private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);从这里获取缓存的单实例bean
                3.缓存中拿不到，开始bean的创建对象流程
                4.标记当前bean已经被创建 markBeanAsCreated(beanName);
                5.获取bean的定义信息 final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
                6.获取当前bean依赖的其他的bean，如果有，按照 getBean(beanName);的方式把依赖的bean先创建出来
                7.启动单实例bean的创建流程
                    1.createBean(beanName, mbd, args);
                    2.Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让 BeanPostProcessors 先拦截返回代理对象
                        InstantiationAwareBeanPostProcessor 提前执行
                        先触发 bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName); -> Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName);
                        如果有返回值，触发 bean = applyBeanPostProcessorsAfterInitialization(bean, beanName); -> result = processor.postProcessAfterInitialization(result, beanName);
                    3.如果前面的 InstantiationAwareBeanPostProcessor 没有返回代理对象，调用步骤4
                    4.Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建bean
                        1.创建bean实例 instanceWrapper = createBeanInstance(beanName, mbd, args);
                            利用工厂方法或者对象的构造器创建出Bean实例
                        2.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                            调用 MergedBeanDefinitionPostProcessor 的 bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);
                        3.populateBean(beanName, mbd, instanceWrapper);对bean进行装配，属性赋值
                            赋值之前
                            1.拿到 InstantiationAwareBeanPostProcessor 类型的后置处理器，如果能拿到，执行 ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)
                            2.拿到 InstantiationAwareBeanPostProcessor 类型的后置处理器，如果能拿到，执行 pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
                            开始赋值
                            3.应用Bean属性的值(为属性利用setter方法等进行赋值) -> applyPropertyValues(beanName, mbd, bw, pvs);
                        4.initializeBean(beanName, exposedObject, mbd);Bean初始化
                            1.执行Aware接口中的方法 -> invokeAwareMethods(beanName, bean);
                                BeanNameAware、BeanClassLoaderAware、BeanFactoryAware
                            2.执行后置处理器初始化之前的方法 -> applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
                                [BeanPostProcessor] processor.postProcessBeforeInitialization(result, beanName);
                            3.执行初始化方法 -> invokeInitMethods(beanName, wrappedBean, mbd);
                                1.是否是 InitializingBean 接口的实现，执行接口规定的初始化方法
                                2.是否自定义初始化方法，如果有就调用自定义初始化方法
                            4.执行后置处理器初始化后的方法 -> applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
                                调用 BeanPostProcessor 的 result = processor.postProcessAfterInitialization(result, beanName);
                        5.registerDisposableBeanIfNecessary(beanName, bean, mbd);注册Bean的销毁方法
                    5.将创建的Bean添加到缓存中 singletonObjects （IoC容器本质就是这些缓存了组件Map，其中有单实例Bean，环境信息等等）
        4.所有bean都利用getBean创建完成以后，检查所有的bean是否为 SmartInitializingSingleton 接口的实现类
            如果是：调用 smartSingleton.afterSingletonsInstantiated();
12.finishRefresh();完成BeanFactory的初始化创建工作：IoC容器创建完成
    1.initLifecycleProcessor(); 初始化和生命周期有关的后置处理器：LifecycleProcessor
        默认从容器中查找是否有lifeCyCleProcessor的组件【LifecycleProcessor】，如果没有就创建 DefaultLifecycleProcessor defaultProcessor = new DefaultLifecycleProcessor();
        写一个LifecycleProcessor的实现类，可以在 BeanFactory 刷新完成，和关闭的时候进行调用(onRefresh(),onClose())
    2.getLifecycleProcessor().onRefresh();拿到前面定义的生命周期处理器（BeanFactory），回调onRefresh();方法
    3.publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成时间的时间
    4.LiveBeansView.registerApplicationContext(this);

============================================ 总结 =================================================================
1.Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息
    1.使用xml注册Bean:<bean/>
    2.使用注解注册bean:@Service、@Component、@Bean
2.Spring容器会在合适的实际创建这些Bean
    1.用到这个bean的时候，利用getBean创建bean，创建好以后保存到容器中
    2.统一创建剩下所有bean的时候，finishBeanFactoryInitialization(beanFactory);
3.后置处理器：每一个bean创建完成都会使用各种后置处理器，来增强bean的功能
    AutowiredAnnotationBeanPostProcessor:处理自动注入
    AnnotationAwareAspectJAutoProxyCreator:来做AOP的功能
4.事件驱动模型 ApplicationListener 事件监听器：
    事件派发
