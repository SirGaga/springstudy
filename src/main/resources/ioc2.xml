<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 正确的为各种属性赋值 -->
    <!-- 测试使用null值，引用类型赋值（引用其他bean、引用内部bean），
        集合类型赋值（list，map，properties），util名称空间创建集合类型的bean，
        级联属性赋值
    -->
    <!--在没有给属性赋值的情况下，默认引用类型就是null；基本类型是默认值-->
    <bean  id="person01" class="com.zhangjie.springstudy.Person">
        <property name="name">
            <!-- 所有复杂赋值都是在property下的子标签中进行赋值 -->
            <null></null>
        </property>
        <!--
            ref：代表引用外部bean，严格的地址引用
            等价于 car = (Car) applicationContext2.getBean("car01")
        -->
        <!-- <property name="car" ref="car01" > -->
        <!--
            等价于 Car car = new Car(),即引用内部bean
            内部bean不能被获取到，只能内部使用
         -->
        <property name="car">
            <bean  class="com.zhangjie.springstudy.Car">
                <property name="carName" value="自行车"></property>
            </bean>

        </property>

    </bean>
    <bean id="book01" class="com.zhangjie.springstudy.Book">
        <property name="bookName" value="东游记"></property>
    </bean>
    <bean id="car01" class="com.zhangjie.springstudy.Car">
        <property name="carName" value="宝马"></property>
        <property name="color" value="白"></property>
        <property name="price" value="125380"></property>
    </bean>

    <bean  id="person02" class="com.zhangjie.springstudy.Person">
        <!-- 如何为list赋值 -->
        <property name="books">
            <!-- 等价于 books = new ArrayList<Book>() -->
            <list>
                <!-- list标签体中添加每一个元素 -->
                <bean id="book002" class="com.zhangjie.springstudy.Book" p:bookName="西游记"></bean>
                <!-- 引用一个外部元素 -->
                <ref bean="book01"></ref>
            </list>
        </property>
        <!-- Map<String,Object> -->
        <property name="map">
            <!-- map = new LinkedHashMap() -->
            <map>
                <!-- 一个entry代表一个键值对 -->
                <entry key="key01" value="张三"></entry>
                <entry key="key02" value="18"></entry>
                <entry key="key03"  value-ref="book01"></entry>
                <entry key="key04" >
                    <bean class="com.zhangjie.springstudy.Car">
                        <property name="carName" value="宝马"></property>
                    </bean>
                </entry>
                <entry key="key05" >
                    <map>

                    </map>

                </entry>
            </map>
        </property>
        <!-- private Properties properties -->
        <property name="properties">
            <!-- properties = new Properties() 所有的key=v都是String类型的-->
            <props>
                <!-- 因为key=v都是String类型的，所以值都写在标签体中 -->
                <prop key="username">root</prop>
                <prop key="password">123456</prop>
            </props>

        </property>
    </bean>

    <!--
        util名称空间创建集合类型的bean
        方便引用
    -->
    <bean id="person03" class="com.zhangjie.springstudy.Person">
        <property name="map" ref="myMap">

        </property>
    </bean>


    <!-- 等价于创建一个LinkedHashMap new LinkedHashMap()  -->
    <util:map id="myMap">
        <!-- 添加元素 -->
        <entry key="key01" value="张三"></entry>
        <entry key="key02" value="18"></entry>
        <entry key="key03"  value-ref="book01"></entry>
        <entry key="key04" >
            <bean class="com.zhangjie.springstudy.Car">
                <property name="carName" value="宝马"></property>
            </bean>
        </entry>
        <entry key="key05" >
            <map>
            </map>
        </entry>
    </util:map>
    <!-- 级联属性赋值：级联属性：就是对象中属性的属性 -->
    <bean id="person04" class="com.zhangjie.springstudy.Person">
        <!-- 为car赋值的时候改变car的价格 -->
        <property name="car" ref="car01"></property>
        <!--为属性的属性赋值，
        注意：原来bean的属性如果是外部引用的话 一旦为该属性的级联属性赋值会导致外部引用的值也会发生改变，
        因为外部引用遵守的是严格的地址引用-->
        <property name="car.price" value="182036"></property>
    </bean>
    <!--工厂方式-->
    <!--
        实验六:通过继承实现bean配置信息的重用
        实验七:通过abstract属性创建一个模板bean
        实验八:bean之间的依赖
        实验九:测试bean的作用域，分别创建单利和多实例的bean
    -->
    <!-- abstract="true":代表这个bean的配置是一个抽象的，不能获取实例，只能被继承，即使用parent参数  -->
    <bean id="person05" class="com.zhangjie.springstudy.Person" abstract="true">
        <property name="name" value="张三"></property>
        <property name="age" value="18"></property>
        <property name="gender" value="男"></property>
        <property name="email" value="214151436@qq.com"></property>
    </bean>
    <!-- parent:指定当前bean的配置信息继承于哪个bean -->
    <bean id="person06" class="com.zhangjie.springstudy.Person" parent="person05">
        <property name="name" value="李四"></property>

    </bean>


</beans>